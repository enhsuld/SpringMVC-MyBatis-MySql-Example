<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">

	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
	
		<property name="initialSize" value="0" />		
		<property name="maxActive" value="20" />	
		<property name="maxIdle" value="20" />
		<property name="minIdle" value="0" />		
		<property name="maxWait" value="60000" />
		
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1800" />
		<property name="logAbandoned" value="true" />
		<property name="filters" value="mergeStat" />
	</bean>

	<!-- Used to create the session factory. then use the session to map with mapper xml file or commit or roll-back.-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- mapperLocation property: is used to locate the mybatis's mapper xml file -->
		<property name="mapperLocations" value="classpath:com/likypan/mybatis/mapping/*.xml" />
	</bean>
	
	<!-- Configure the datasource for the mapper, therefore no need to write the concrete class the the interface -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- Here the basePackage is used to define the mapper class(interface) -->
		<property name="basePackage" value="com.likypan.mybatis.dao" />
		<!-- If there is only one data source, no need to declare the sql session factory.
		     If there is more than one data source, you need to use the sqlSessionFactoryBeanName
		     to configure sql session factory. Otherwise, it will fail-->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!-- Configure the transaction manager by using spring with injecting the customized data source  -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 基于声明式的事务管理:1.xml配置方式,2.注解模式@Transactional -->
	<!-- 1.声明式事务xml配置：
		 a.配置事务切面。 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />

			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<!-- 1.声明式事务xml配置：
		 b.配置AOP。 -->
	<aop:config>
		<!-- Use transaction in the service package with the above transaction method. E.g. to handle the commit and roll-back of the transaction -->
		<aop:pointcut id="transactionPointcut" expression="execution(* com.likypan.mybatis.service..*Impl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>
	
	<!-- 2.声明式事务注解@Transactional配置： -->
	<!-- 开启事务控制的注解支持  -->
    <!-- <tx:annotation-driven transaction-manager="transactionManager"/> -->
</beans>